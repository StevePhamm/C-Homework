Exercise 6.14: Give an example of when a parameter should be a reference
type. Give an example of when a parameter should not be a reference.

void reset(int &i)
{
        i = 0;
}
a parameter should not be a reference:

void print(std::vector<int>::iterator begin, std::vector<int>::iterator end)
{
        for (std::vector<int>::iterator iter = begin; iter != end; ++iter)
                std::cout << *iter << std::endl;
}

Exercise 6.15: Explain the rationale for the type of each of find_char’s
parameters In particular, why is s a reference to const but occurs is a
plain reference? Why are these parameters references, but the char
parameter c is not? What would happen if we made s a plain reference?
What if we made occurs a reference to const?

why is s a reference to const but occurs is a plain reference?
cause the s should not be changed by this function. but occurs's result must be calculated by the function.

Why are these parameters references, but the char parameter c is not?
cause c may be a temp varable, such as find_char(s, 'a', occurs)

What would happen if we made s a plain reference? What if we made occurs a reference to const?
s could be changed in the function, and occurs whould not be changed. so occurs = 0; is an error.

Exercise 6.16: The following function, although legal, is less useful than it
might be. Identify and correct the limitation on this function:
Click here to view code image
bool is_empty(string& s) { return s.empty(); }

Since this function doesn't change the argument, "const" shoud be added before string&s, otherwise this function is misleading and can't be used with const string or in a const function.

Exercise 6.17: Write a function to determine whether a string contains
any capital letters. Write a function to change a string to all lowercase. Do
the parameters you used in these functions have the same type? If so, why?
If not, why not?

Not the same. For the first one "const" was used, since no change need to do for the argument. For the second function, "const" can't be used, because the content of the agument should be changed.

Exercise 6.18: Write declarations for each of the following functions. When
you write these declarations, use the name of the function to indicate what
the function does.
(a) A function named compare that returns a bool and has two parameters
that are references to a class named matrix.
(b) A function named change_val that returns a vector<int> iterator
and takes two parameters: One is an int and the other is an iterator for a
vector<int>.

Answers:


a) bool compare(matrix &x, matrix &y) {....}

b) std::vector<int>::iterator change_val(int v, vector<int>::iterator c) {...}


Exercise 6.19: Given the following declarations, determine which calls are
legal and which are illegal. For those that are illegal, explain why.


double calc(double);
int count(const string &, char);
int sum(vector<int>::iterator, vector<int>::iterator,
int);
vector<int> vec(10);


(a) calc(23.4, 55.1);   // only has one parameter  
(b) count("abcda", 'a'); // legal
(c) calc(66); // legal
(d) sum(vec.begin(), vec.end(), 3.8); // legal


Exercise 6.20: When should reference parameters be references to const?
What happens if we make a parameter a plain reference when it could be a
reference to const?

Answer:

If we can use const, just use it. If we make a parameter a plain reference when it could be a reference to const, the reference value maybe changed.


Exercise 6.24: Explain the behavior of the following function. If there are
problems in the code, explain what they are and how you might fix them.

void print(const int ia[10])
{
for (size_t i = 0; i != 10; ++i)
cout << ia[i] << endl;
}

Answer:

Arrays have two special properties that affect how we define and use functions that operate on arrays: We cannot copy an array, and when we use an array it is (usually) converted to a pointer.
So we cannot pass an array by value, and when we pass an array to a function, we are actually passing a pointer to the array's first element.

In this question, const int ia[10] is actually same as const int*, and the size of the array is irrelevant. we can pass const int ia[3] or const int ia[255], there are no differences. If we want to pass an array which size is ten, we should use reference like that:

void print10(const int (&ia)[10]) { /*...*/ }


