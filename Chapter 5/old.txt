Exercise 5.1: What is a null statement? When might you use a null
statement?

Answer: Empty Statement with only a semicolon ;

Exercise 5.2: What is a block? When might you might use a block?

Answer: A block is multiple statements within a condition (if statements, while loops, etc..)

Exercise 5.3: Use the comma operator (§ 4.10, p. 157) to rewrite the
while loop from § 1.4.1 (p. 11) so that it no longer requires a block. Explain
whether this rewrite improves or diminishes the readability of this code.

#include <iostream>
int main()
{
int sum = 0, val = 1;
// keep executing the while as long as val is less than or equal to 10
while (val <= 10) 
sum += val, ++ival; // assigns sum + val to sum, add 1 to val
std::cout << "Sum of 1 to 10 inclusive is " << sum << std::endl;
return 0;
}


Diminshes

Exercise 5.4: Explain each of the following examples, and correct any
problems you detect.
(a) while (string::iterator iter != s.end()) { /* . . . */ }
(b) while (bool status = find(word)) { /* . . . */ }
if (!status) { /* . . . */ }

Answer:

std::string::iterator iter = s.begin();
while(iter != s.end());

while (bool status = find(word)
{
	if (!status)
}

Exercise 5.7: Correct the errors in each of the following code fragments:
(a) if (ival1 != ival2)
ival1 = ival2
else ival1 = ival2 = 0;
(b) if (ival < minval)
minval = ival
occurs = 1;
(c) if (int ival = get_value())
cout << "ival = " << ival << endl;
if (!ival)
cout << "ival = 0\n";
(d) if (ival = 0)
ival = get_value();
